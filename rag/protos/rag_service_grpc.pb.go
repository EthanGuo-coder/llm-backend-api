// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: rag_service.proto

package yourproject

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	KnowledgeBaseService_CreateKnowledgeBase_FullMethodName = "/rag_service.KnowledgeBaseService/CreateKnowledgeBase"
	KnowledgeBaseService_ListKnowledgeBases_FullMethodName  = "/rag_service.KnowledgeBaseService/ListKnowledgeBases"
	KnowledgeBaseService_UploadDocument_FullMethodName      = "/rag_service.KnowledgeBaseService/UploadDocument"
	KnowledgeBaseService_RetrieveInfo_FullMethodName        = "/rag_service.KnowledgeBaseService/RetrieveInfo"
	KnowledgeBaseService_ListEmbeddingModels_FullMethodName = "/rag_service.KnowledgeBaseService/ListEmbeddingModels"
	KnowledgeBaseService_ListDocuments_FullMethodName       = "/rag_service.KnowledgeBaseService/ListDocuments"
	KnowledgeBaseService_DeleteKnowledgeBase_FullMethodName = "/rag_service.KnowledgeBaseService/DeleteKnowledgeBase"
	KnowledgeBaseService_DeleteDocument_FullMethodName      = "/rag_service.KnowledgeBaseService/DeleteDocument"
)

// KnowledgeBaseServiceClient is the client API for KnowledgeBaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KnowledgeBaseServiceClient interface {
	// 创建知识库
	CreateKnowledgeBase(ctx context.Context, in *CreateKBRequest, opts ...grpc.CallOption) (*CreateKBResponse, error)
	// 获取用户的所有知识库
	ListKnowledgeBases(ctx context.Context, in *ListKBsRequest, opts ...grpc.CallOption) (*ListKBsResponse, error)
	// 上传并处理文档
	UploadDocument(ctx context.Context, in *UploadDocRequest, opts ...grpc.CallOption) (*UploadDocResponse, error)
	// 从知识库检索信息
	RetrieveInfo(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*RetrieveResponse, error)
	// 获取支持的Embedding模型列表
	ListEmbeddingModels(ctx context.Context, in *ListEmbeddingModelsRequest, opts ...grpc.CallOption) (*ListEmbeddingModelsResponse, error)
	// 获取知识库中的文档列表
	ListDocuments(ctx context.Context, in *ListDocsRequest, opts ...grpc.CallOption) (*ListDocsResponse, error)
	// 删除知识库
	DeleteKnowledgeBase(ctx context.Context, in *DeleteKBRequest, opts ...grpc.CallOption) (*DeleteKBResponse, error)
	// 删除文档
	DeleteDocument(ctx context.Context, in *DeleteDocRequest, opts ...grpc.CallOption) (*DeleteDocResponse, error)
}

type knowledgeBaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKnowledgeBaseServiceClient(cc grpc.ClientConnInterface) KnowledgeBaseServiceClient {
	return &knowledgeBaseServiceClient{cc}
}

func (c *knowledgeBaseServiceClient) CreateKnowledgeBase(ctx context.Context, in *CreateKBRequest, opts ...grpc.CallOption) (*CreateKBResponse, error) {
	out := new(CreateKBResponse)
	err := c.cc.Invoke(ctx, KnowledgeBaseService_CreateKnowledgeBase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseServiceClient) ListKnowledgeBases(ctx context.Context, in *ListKBsRequest, opts ...grpc.CallOption) (*ListKBsResponse, error) {
	out := new(ListKBsResponse)
	err := c.cc.Invoke(ctx, KnowledgeBaseService_ListKnowledgeBases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseServiceClient) UploadDocument(ctx context.Context, in *UploadDocRequest, opts ...grpc.CallOption) (*UploadDocResponse, error) {
	out := new(UploadDocResponse)
	err := c.cc.Invoke(ctx, KnowledgeBaseService_UploadDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseServiceClient) RetrieveInfo(ctx context.Context, in *RetrieveRequest, opts ...grpc.CallOption) (*RetrieveResponse, error) {
	out := new(RetrieveResponse)
	err := c.cc.Invoke(ctx, KnowledgeBaseService_RetrieveInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseServiceClient) ListEmbeddingModels(ctx context.Context, in *ListEmbeddingModelsRequest, opts ...grpc.CallOption) (*ListEmbeddingModelsResponse, error) {
	out := new(ListEmbeddingModelsResponse)
	err := c.cc.Invoke(ctx, KnowledgeBaseService_ListEmbeddingModels_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseServiceClient) ListDocuments(ctx context.Context, in *ListDocsRequest, opts ...grpc.CallOption) (*ListDocsResponse, error) {
	out := new(ListDocsResponse)
	err := c.cc.Invoke(ctx, KnowledgeBaseService_ListDocuments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseServiceClient) DeleteKnowledgeBase(ctx context.Context, in *DeleteKBRequest, opts ...grpc.CallOption) (*DeleteKBResponse, error) {
	out := new(DeleteKBResponse)
	err := c.cc.Invoke(ctx, KnowledgeBaseService_DeleteKnowledgeBase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeBaseServiceClient) DeleteDocument(ctx context.Context, in *DeleteDocRequest, opts ...grpc.CallOption) (*DeleteDocResponse, error) {
	out := new(DeleteDocResponse)
	err := c.cc.Invoke(ctx, KnowledgeBaseService_DeleteDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KnowledgeBaseServiceServer is the server API for KnowledgeBaseService service.
// All implementations must embed UnimplementedKnowledgeBaseServiceServer
// for forward compatibility
type KnowledgeBaseServiceServer interface {
	// 创建知识库
	CreateKnowledgeBase(context.Context, *CreateKBRequest) (*CreateKBResponse, error)
	// 获取用户的所有知识库
	ListKnowledgeBases(context.Context, *ListKBsRequest) (*ListKBsResponse, error)
	// 上传并处理文档
	UploadDocument(context.Context, *UploadDocRequest) (*UploadDocResponse, error)
	// 从知识库检索信息
	RetrieveInfo(context.Context, *RetrieveRequest) (*RetrieveResponse, error)
	// 获取支持的Embedding模型列表
	ListEmbeddingModels(context.Context, *ListEmbeddingModelsRequest) (*ListEmbeddingModelsResponse, error)
	// 获取知识库中的文档列表
	ListDocuments(context.Context, *ListDocsRequest) (*ListDocsResponse, error)
	// 删除知识库
	DeleteKnowledgeBase(context.Context, *DeleteKBRequest) (*DeleteKBResponse, error)
	// 删除文档
	DeleteDocument(context.Context, *DeleteDocRequest) (*DeleteDocResponse, error)
	mustEmbedUnimplementedKnowledgeBaseServiceServer()
}

// UnimplementedKnowledgeBaseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKnowledgeBaseServiceServer struct {
}

func (UnimplementedKnowledgeBaseServiceServer) CreateKnowledgeBase(context.Context, *CreateKBRequest) (*CreateKBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKnowledgeBase not implemented")
}
func (UnimplementedKnowledgeBaseServiceServer) ListKnowledgeBases(context.Context, *ListKBsRequest) (*ListKBsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKnowledgeBases not implemented")
}
func (UnimplementedKnowledgeBaseServiceServer) UploadDocument(context.Context, *UploadDocRequest) (*UploadDocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDocument not implemented")
}
func (UnimplementedKnowledgeBaseServiceServer) RetrieveInfo(context.Context, *RetrieveRequest) (*RetrieveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveInfo not implemented")
}
func (UnimplementedKnowledgeBaseServiceServer) ListEmbeddingModels(context.Context, *ListEmbeddingModelsRequest) (*ListEmbeddingModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmbeddingModels not implemented")
}
func (UnimplementedKnowledgeBaseServiceServer) ListDocuments(context.Context, *ListDocsRequest) (*ListDocsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocuments not implemented")
}
func (UnimplementedKnowledgeBaseServiceServer) DeleteKnowledgeBase(context.Context, *DeleteKBRequest) (*DeleteKBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKnowledgeBase not implemented")
}
func (UnimplementedKnowledgeBaseServiceServer) DeleteDocument(context.Context, *DeleteDocRequest) (*DeleteDocResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocument not implemented")
}
func (UnimplementedKnowledgeBaseServiceServer) mustEmbedUnimplementedKnowledgeBaseServiceServer() {}

// UnsafeKnowledgeBaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KnowledgeBaseServiceServer will
// result in compilation errors.
type UnsafeKnowledgeBaseServiceServer interface {
	mustEmbedUnimplementedKnowledgeBaseServiceServer()
}

func RegisterKnowledgeBaseServiceServer(s grpc.ServiceRegistrar, srv KnowledgeBaseServiceServer) {
	s.RegisterService(&KnowledgeBaseService_ServiceDesc, srv)
}

func _KnowledgeBaseService_CreateKnowledgeBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseServiceServer).CreateKnowledgeBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseService_CreateKnowledgeBase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseServiceServer).CreateKnowledgeBase(ctx, req.(*CreateKBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseService_ListKnowledgeBases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKBsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseServiceServer).ListKnowledgeBases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseService_ListKnowledgeBases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseServiceServer).ListKnowledgeBases(ctx, req.(*ListKBsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseService_UploadDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseServiceServer).UploadDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseService_UploadDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseServiceServer).UploadDocument(ctx, req.(*UploadDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseService_RetrieveInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseServiceServer).RetrieveInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseService_RetrieveInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseServiceServer).RetrieveInfo(ctx, req.(*RetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseService_ListEmbeddingModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmbeddingModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseServiceServer).ListEmbeddingModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseService_ListEmbeddingModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseServiceServer).ListEmbeddingModels(ctx, req.(*ListEmbeddingModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseService_ListDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDocsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseServiceServer).ListDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseService_ListDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseServiceServer).ListDocuments(ctx, req.(*ListDocsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseService_DeleteKnowledgeBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseServiceServer).DeleteKnowledgeBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseService_DeleteKnowledgeBase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseServiceServer).DeleteKnowledgeBase(ctx, req.(*DeleteKBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KnowledgeBaseService_DeleteDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeBaseServiceServer).DeleteDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KnowledgeBaseService_DeleteDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeBaseServiceServer).DeleteDocument(ctx, req.(*DeleteDocRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KnowledgeBaseService_ServiceDesc is the grpc.ServiceDesc for KnowledgeBaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KnowledgeBaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rag_service.KnowledgeBaseService",
	HandlerType: (*KnowledgeBaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKnowledgeBase",
			Handler:    _KnowledgeBaseService_CreateKnowledgeBase_Handler,
		},
		{
			MethodName: "ListKnowledgeBases",
			Handler:    _KnowledgeBaseService_ListKnowledgeBases_Handler,
		},
		{
			MethodName: "UploadDocument",
			Handler:    _KnowledgeBaseService_UploadDocument_Handler,
		},
		{
			MethodName: "RetrieveInfo",
			Handler:    _KnowledgeBaseService_RetrieveInfo_Handler,
		},
		{
			MethodName: "ListEmbeddingModels",
			Handler:    _KnowledgeBaseService_ListEmbeddingModels_Handler,
		},
		{
			MethodName: "ListDocuments",
			Handler:    _KnowledgeBaseService_ListDocuments_Handler,
		},
		{
			MethodName: "DeleteKnowledgeBase",
			Handler:    _KnowledgeBaseService_DeleteKnowledgeBase_Handler,
		},
		{
			MethodName: "DeleteDocument",
			Handler:    _KnowledgeBaseService_DeleteDocument_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rag_service.proto",
}
